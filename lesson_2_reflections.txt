- What happens when you initialize a repository? Why do you need to do it?
	
	When you run the command "git init" you create the .git directory (which is the repository?). This is where the meta data (all committed versions) will be saved.

- How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a landing spot in between the working directory and the repository. You add files into the staging area before committing them, which is nice since you can choose what files you want to commit. (You can add all files in the working directory by typing "git add --all".)

- How can you use the staging area to make sure you have one commit per logical change?

	You add only the files that are changed in the logical change. To check if the files in the staging area only has one logical change you can run 
	"git diff --staged" to compare the files in the staging area to the last commit.

- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	If you make an alternate version of the program but you dont want it to replace the main (master) version. Or if you want to try something more experimental or other major changes.

- How do the diagrams help you visualize the branch structure?

	They help to get an overview of the whole tree structure and see what a commit depend on (its mother).

- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The merging of two branches makes them into one branch with commits logged in the chronological order. The changes in both branches will be present in the merged branch. ...?

- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Sometimes automatic merging can cause conflicts if changes have been made to the same part of the code in the merging branches. Always doing it manually can take much more time.